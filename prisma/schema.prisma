generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ingredients {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  name              String
  category          String              @db.VarChar(64)
  supplierId        Int?                @db.UnsignedInt
  unitId            Int?                @db.UnsignedInt
  packagePrice      Decimal?            @db.Decimal(10, 2)
  qtyPerPack        Decimal?            @db.Decimal(12, 3)
  unitCost          Decimal?            @db.Decimal(12, 4)
  stock             Decimal             @default(0.000) @db.Decimal(14, 3)
  threshold         Decimal             @default(0.000) @db.Decimal(14, 3)
  createdAt         DateTime            @default(now()) @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @db.Timestamp(0)
  suppliers         suppliers?          @relation(fields: [supplierId], references: [id], map: "fk_ingredients_supplier")
  units             units?              @relation(fields: [unitId], references: [id], map: "fk_ingredients_unit")
  recipeingredients recipeingredients[]

  @@index([name], map: "idx_ingredients_name")
  @@index([supplierId], map: "idx_ingredients_supplierId")
  @@index([unitId], map: "idx_ingredients_unitId")
  @@index([category], map: "idx_ingredients_category")
}

model menu {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String
  image           String?           @db.LongText
  type            menu_type
  status          menu_status       @default(AVAILABLE)
  stock           Int               @default(0) @db.UnsignedInt
  basePrice       Decimal?          @db.Decimal(10, 2)
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @db.Timestamp(0)
  category        String?           @db.VarChar(50)
  orderitemaddons orderitemaddons[]
  orderitems      orderitems[]
  recipes         recipes[]
  sizes           sizes[]

  @@index([status], map: "idx_menu_status")
  @@index([type], map: "idx_menu_type")
  @@index([category], map: "idx_menu_category")
}

model orderitemaddons {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  orderItemId Int        @db.UnsignedInt
  addonId     Int        @db.UnsignedInt
  price       Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now()) @db.Timestamp(0)
  updatedAt   DateTime   @default(now()) @db.Timestamp(0)
  menu        menu       @relation(fields: [addonId], references: [id], onDelete: NoAction, map: "fk_oia_addon_menu")
  orderitems  orderitems @relation(fields: [orderItemId], references: [id], onDelete: Cascade, map: "fk_oia_orderitem")

  @@index([addonId], map: "idx_oia_addonId")
  @@index([orderItemId], map: "idx_oia_orderItemId")
}

model orderitems {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  orderId         Int               @db.UnsignedInt
  menuId          Int               @db.UnsignedInt
  sizeId          Int?              @db.UnsignedInt
  quantity        Int               @default(1) @db.UnsignedInt
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @default(now()) @db.Timestamp(0)
  orderitemaddons orderitemaddons[]
  menu            menu              @relation(fields: [menuId], references: [id], onDelete: NoAction, map: "fk_orderitems_menu")
  orders          orders            @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "fk_orderitems_order")
  sizes           sizes?            @relation(fields: [sizeId], references: [id], map: "fk_orderitems_size")

  @@index([menuId], map: "idx_orderitems_menuId")
  @@index([orderId], map: "idx_orderitems_orderId")
  @@index([sizeId], map: "idx_orderitems_sizeId")
}

model cups {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String
  sizes     sizes[]  @relation("CupSizes")
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
}

model orders {
  id            Int                   @id @default(autoincrement()) @db.UnsignedInt
  userId        Int                   @db.UnsignedInt
  total         Decimal               @db.Decimal(10, 2)
  status        orders_status         @default(PENDING)
  paymentMethod orders_paymentMethod?
  paidAt        DateTime?             @db.DateTime(0)
  createdAt     DateTime              @default(now()) @db.Timestamp(0)
  updatedAt     DateTime              @default(now()) @db.Timestamp(0)
  baseTotal     Decimal               @default(0.00) @db.Decimal(10, 2)
  orderitems    orderitems[]
  users         users                 @relation(fields: [userId], references: [id], onDelete: NoAction, map: "fk_orders_user")

  @@index([status], map: "idx_orders_status")
  @@index([userId], map: "idx_orders_userId")
  @@index([paymentMethod], map: "idx_orders_paymentMethod")
}

model recipeingredients {
  id           Int         @id @default(autoincrement()) @db.UnsignedInt
  recipeId     Int         @db.UnsignedInt
  ingredientId Int         @db.UnsignedInt
  qtyNeeded    Decimal     @db.Decimal(14, 3)
  createdAt    DateTime    @default(now()) @db.Timestamp(0)
  updatedAt    DateTime    @default(now()) @db.Timestamp(0)
  ingredients  ingredients @relation(fields: [ingredientId], references: [id], onDelete: NoAction, map: "fk_ri_ingredient")
  recipes      recipes     @relation(fields: [recipeId], references: [id], onDelete: Cascade, map: "fk_ri_recipe")

  @@index([ingredientId], map: "idx_ri_ingredientId")
  @@index([recipeId], map: "idx_ri_recipeId")
}

model recipes {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  menuId            Int                 @db.UnsignedInt
  sizeId            Int?                @db.UnsignedInt
  name              String?
  createdAt         DateTime            @default(now()) @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @db.Timestamp(0)
  recipeingredients recipeingredients[]
  menu              menu                @relation(fields: [menuId], references: [id], onDelete: Cascade, map: "fk_recipes_menu")
  sizes             sizes?              @relation(fields: [sizeId], references: [id], map: "fk_recipes_size")

  @@index([menuId], map: "idx_recipes_menuId")
  @@index([sizeId], map: "idx_recipes_sizeId")
}

model sizes {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  label      String   @db.VarChar(64)
  price      Decimal  @db.Decimal(10, 2)
  menuId     Int      @db.UnsignedInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @db.Timestamp(0)
  orderitems orderitems[]
  recipes    recipes[]
  menu       menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, map: "fk_sizes_menu")

  cupId Int? @db.UnsignedInt
  cup   cups? @relation("CupSizes", fields: [cupId], references: [id], onDelete: SetNull)

  @@index([menuId], map: "idx_sizes_menuId")
  @@index([cupId], map: "idx_sizes_cupId")
  @@unique([menuId, label], map: "uq_sizes_menu_label")
}


model suppliers {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String
  address     String?       @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  updatedAt   DateTime      @default(now()) @db.Timestamp(0)
  ingredients ingredients[]

  @@index([name], map: "idx_suppliers_name")
}

model units {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @unique(map: "uq_units_name") @db.VarChar(64)
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  updatedAt   DateTime      @default(now()) @db.Timestamp(0)
  ingredients ingredients[]
}

model users {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  email     String     @unique(map: "email")
  username  String     @unique(map: "uq_users_username") @db.VarChar(64)
  password  String     @db.VarChar(255)
  name      String
  role      users_role @default(BARISTA)
  status    users_status @default(ACTIVE)
  phone     String?    @db.VarChar(32)
  hireDate  DateTime?  @db.Date
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @db.Timestamp(0)
  orders    orders[]
}

enum orders_status {
  PENDING
  COMPLETED
  PAID
  CANCELLED
  VOID
}

enum menu_type {
  COFFEE
  NON_COFFEE @map("NON-COFFEE")
  MEAL
  ADDON
}

enum orders_paymentMethod {
  CASH
  CARD
  GCASH
  OTHER
}

enum menu_status {
  AVAILABLE
  UNAVAILABLE
  HIDDEN
}

enum users_role {
  ADMIN
  CASHIER
  BARISTA
}

enum users_status {
  ACTIVE
  INACTIVE
}
